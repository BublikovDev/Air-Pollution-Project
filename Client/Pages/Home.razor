@page "/"
@using Client.Static
@using Shared.Models.Map


@inject IJSRuntime JS

<div class="container-fluid">
    <div class=row>
        <div class="col mb-3 center-block">
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
                <label class="btn btn-primary @(display_traffic ? "active" : "")" @onclick="() => SwitchMap(true)">
                    <input type="radio" name="options" autocomplete="off" checked="@display_traffic"> Traffic
                </label>
                <label class="btn btn-primary @(display_traffic ? "" : "active")" @onclick="() => SwitchMap(false)">
                    <input type="radio" name="options" autocomplete="off" checked="@(display_traffic == false)"> Sensors
                </label>
            </div>
        </div>
    </div>
    <div class="row">
        @if (display_traffic)
        {
            <div class="col">
                <div id="map2" style="height:79vh;width:100%;"></div>
            </div>
        }
        else
        {
            <div class="col">
                <div id="map" style="height:79vh;width:100%;"></div>
            </div>
        }
        
        
    </div>
</div>


@code {
    [Inject] HttpClient HttpClient { get; set; }

    Country _country;
    bool _isDataLoaded =false;

    bool display_traffic = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //create aqi on service
                //choose aqi below
                //
                await LoadData();

                if(_country!=null)
                {
                    await LoadLeaflet();
                }
                else
                {
                    throw new Exception("Empty data");
                }
            }
            catch(Exception ex)
            {
            }

        }
    }

    protected async Task LoadLeaflet()
    {
        await JS.InvokeVoidAsync("initialize_leaflet", null);
        StateHasChanged();
        foreach (var item in _country.Locations)
        {
            var aqiSensor = item.Sensors.Where(s => s.Name == "AQI").FirstOrDefault();

            if(aqiSensor.Value<=50)
                await JS.InvokeVoidAsync("addMarkers_leaflet", item.Latitude, item.Longitude, (int)aqiSensor.Value, "green-div-icon", item);
            else if (aqiSensor.Value <= 100)
                await JS.InvokeVoidAsync("addMarkers_leaflet", item.Latitude, item.Longitude, (int)aqiSensor.Value, "yellow-div-icon",item);
            else if (aqiSensor.Value <= 150)
                await JS.InvokeVoidAsync("addMarkers_leaflet", item.Latitude, item.Longitude, (int)aqiSensor.Value, "orange-div-icon",item);
            else if (aqiSensor.Value <= 200)
                await JS.InvokeVoidAsync("addMarkers_leaflet", item.Latitude, item.Longitude, (int)aqiSensor.Value, "red-div-icon",item);
            else if (aqiSensor.Value <= 300)
                await JS.InvokeVoidAsync("addMarkers_leaflet", item.Latitude, item.Longitude, (int)aqiSensor.Value, "purple-div-icon", item);
            // else if (aqiSensor.Value > 300)
            //     await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "burgundy-div-icon");
            // else
            //     await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "grey-div-icon");

        }

        StateHasChanged();
    }

    protected async Task LoadData()
    {
        try
        {
            _country = await HttpClient.GetFromJsonAsync<Country>(string.Format(APIEndpoints.s_getData, 119));
            _isDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }

    protected async Task LoadGoogle()
    {
        await JS.InvokeVoidAsync("initialize_google", null);
    }

    private async void SwitchMap(bool showTraffic)
    {
        display_traffic = showTraffic;
        StateHasChanged();
        if (display_traffic)
        {
            await LoadGoogle();
        }
        else
        {
            await LoadLeaflet();
        }

    }
}
