@page "/"
@using Client.Static
@using Shared.Models.Map


@inject IJSRuntime JS

<div class="container-fluid">
    <div class="row">
        <div class="col">
            <div id="map" style="height:85vh;width:100%;"></div>
        </div>
    </div>
</div>


@code {
    [Inject] HttpClient HttpClient { get; set; }

    Country _country;
    bool _isDataLoaded =false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                //create aqi on service
                //choose aqi below
                //
                await LoadData();
                if(_country!=null)
                {
                    await JS.InvokeVoidAsync("initialize", null);
                    StateHasChanged();
                    foreach (var item in _country.Locations)
                    {
                        var aqiSensor = item.Sensors.Where(s => s.Name == "AQI").FirstOrDefault();
                        
                        if(aqiSensor.Value<=50)
                            await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "green-div-icon");
                        else if (aqiSensor.Value <= 100)
                            await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "yellow-div-icon");
                        else if (aqiSensor.Value <= 150)
                            await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "orange-div-icon");
                        else if (aqiSensor.Value <= 200)
                            await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "red-div-icon");
                        else if (aqiSensor.Value <= 300)
                            await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "purple-div-icon");
                        // else if (aqiSensor.Value > 300)
                        //     await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "burgundy-div-icon");
                        // else
                        //     await JS.InvokeVoidAsync("addMarkers", item.Latitude, item.Longitude, (int)aqiSensor.Value, "grey-div-icon");

                    }

                    StateHasChanged();
                }
                else
                {
                    throw new Exception("Empty data");
                }
            }
            catch(Exception ex)
            {
                var a = 0;
            }

        }
    }

    protected async Task LoadData()
    {
        try
        {
            _country = await HttpClient.GetFromJsonAsync<Country>(string.Format(APIEndpoints.s_getData, 119));
            _isDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {

        }
    }
}
